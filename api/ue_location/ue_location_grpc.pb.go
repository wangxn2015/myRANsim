// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: ue_location_store.proto

package ue_location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UeLocationServiceClient is the client API for UeLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UeLocationServiceClient interface {
	GetUes(ctx context.Context, in *UesLocationRequest, opts ...grpc.CallOption) (UeLocationService_GetUesClient, error)
	GetUe(ctx context.Context, in *UeLocationRequest, opts ...grpc.CallOption) (UeLocationService_GetUeClient, error)
}

type ueLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUeLocationServiceClient(cc grpc.ClientConnInterface) UeLocationServiceClient {
	return &ueLocationServiceClient{cc}
}

func (c *ueLocationServiceClient) GetUes(ctx context.Context, in *UesLocationRequest, opts ...grpc.CallOption) (UeLocationService_GetUesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UeLocationService_ServiceDesc.Streams[0], "/ue_location_store.UeLocationService/GetUes", opts...)
	if err != nil {
		return nil, err
	}
	x := &ueLocationServiceGetUesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UeLocationService_GetUesClient interface {
	Recv() (*UeInfo, error)
	grpc.ClientStream
}

type ueLocationServiceGetUesClient struct {
	grpc.ClientStream
}

func (x *ueLocationServiceGetUesClient) Recv() (*UeInfo, error) {
	m := new(UeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ueLocationServiceClient) GetUe(ctx context.Context, in *UeLocationRequest, opts ...grpc.CallOption) (UeLocationService_GetUeClient, error) {
	stream, err := c.cc.NewStream(ctx, &UeLocationService_ServiceDesc.Streams[1], "/ue_location_store.UeLocationService/GetUe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ueLocationServiceGetUeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UeLocationService_GetUeClient interface {
	Recv() (*UeInfo, error)
	grpc.ClientStream
}

type ueLocationServiceGetUeClient struct {
	grpc.ClientStream
}

func (x *ueLocationServiceGetUeClient) Recv() (*UeInfo, error) {
	m := new(UeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UeLocationServiceServer is the server API for UeLocationService service.
// All implementations must embed UnimplementedUeLocationServiceServer
// for forward compatibility
type UeLocationServiceServer interface {
	GetUes(*UesLocationRequest, UeLocationService_GetUesServer) error
	GetUe(*UeLocationRequest, UeLocationService_GetUeServer) error
	mustEmbedUnimplementedUeLocationServiceServer()
}

// UnimplementedUeLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUeLocationServiceServer struct {
}

func (UnimplementedUeLocationServiceServer) GetUes(*UesLocationRequest, UeLocationService_GetUesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUes not implemented")
}
func (UnimplementedUeLocationServiceServer) GetUe(*UeLocationRequest, UeLocationService_GetUeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUe not implemented")
}
func (UnimplementedUeLocationServiceServer) mustEmbedUnimplementedUeLocationServiceServer() {}

// UnsafeUeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UeLocationServiceServer will
// result in compilation errors.
type UnsafeUeLocationServiceServer interface {
	mustEmbedUnimplementedUeLocationServiceServer()
}

func RegisterUeLocationServiceServer(s grpc.ServiceRegistrar, srv UeLocationServiceServer) {
	s.RegisterService(&UeLocationService_ServiceDesc, srv)
}

func _UeLocationService_GetUes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UesLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UeLocationServiceServer).GetUes(m, &ueLocationServiceGetUesServer{stream})
}

type UeLocationService_GetUesServer interface {
	Send(*UeInfo) error
	grpc.ServerStream
}

type ueLocationServiceGetUesServer struct {
	grpc.ServerStream
}

func (x *ueLocationServiceGetUesServer) Send(m *UeInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _UeLocationService_GetUe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UeLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UeLocationServiceServer).GetUe(m, &ueLocationServiceGetUeServer{stream})
}

type UeLocationService_GetUeServer interface {
	Send(*UeInfo) error
	grpc.ServerStream
}

type ueLocationServiceGetUeServer struct {
	grpc.ServerStream
}

func (x *ueLocationServiceGetUeServer) Send(m *UeInfo) error {
	return x.ServerStream.SendMsg(m)
}

// UeLocationService_ServiceDesc is the grpc.ServiceDesc for UeLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UeLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ue_location_store.UeLocationService",
	HandlerType: (*UeLocationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUes",
			Handler:       _UeLocationService_GetUes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUe",
			Handler:       _UeLocationService_GetUe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ue_location_store.proto",
}
